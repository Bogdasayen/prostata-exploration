eapply(as.environment(list(a=1,b=2)), function(x) list(x))
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]])))
assignList(list(a=1,b=2))
a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], pos=-1)))
assignList(list(a=1,b=2))
a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], envir=parent.frame())))
assignList(list(a=1,b=2))
a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], pos=-2)))
assignList(list(a=1,b=2))
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], pos=parent.frame(parent.frame()))))
assignList(list(a=1,b=2))
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], pos=parent.frame(1))))
assignList(list(a=1,b=2))
a
?parent.frame
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], pos=parent.frame(2))))
assignList(list(a=1,b=2))
a
assign("a",1)
a
rm(a)
a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], envir=.GlobalEnv)))
assignList(list(a=1,b=2))
a
rm(a,b)
a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], envir=parent.frame(3)))); assignList(a=1,b=2)); a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], envir=parent.frame(3)))); assignList(list(a=1,b=2)); a
assignList <- function(lst) invisible(lapply(1:length(lst), function(i) assign(names(lst)[i], lst[[i]], pos=-3))); assignList(list(a=1,b=2)); a
assignList <- function(lst,...) for(i in 1:length(lst)) assign(names(lst)[i], lst[[i]], ...); assignList(list(a=1,b=2)); a
b
rm(a,b)
traceback()
args(callFhcrc)
formals(callFhcrc)
ls()
assignList(formals(callFhcrc),pos=1)
ls()
ls()
mc.cores
initialSeeds
mc.cores=3
initialSeeds
chunks
cohort
rep(1:n,each=3)
100 %/% 10
100 %/% 11
rep(1:n,each=n %/% mc.cores)
chunks
initialSeeds
set.user.Random.seed
q()
n
q()
n
require(microsimulation)
debug(callFhcrc)
callFhcrc(10)
initialSeeds
.Random.seed
set.user.Random.seed
set.user.Random.seed(12345)
set.user.Random.seed(c(1249631930,  -835007245,  -294554216,   694936249, -2002717914, -2006867089)
)
set.user.Random.seed(c(407,1249631930,  -835007245,  -294554216,   694936249, -2002717914, -2006867089))
ls(2)
user.Random.seed
user.Random.seed()
class(user.Random.seed())
class(user.Random.seed()$seed)
RNGStream(nextStream = FALSE)
set.user.Random.seed(12345)
user.Random.seed()
currentStream$seed()
currentStream
c(407L,user.Random.seed())
c(407L,user.Random.seed()$seed)
nextRNGStream(c(407L,user.Random.seed()$seed))
parallel::nextRNGStream(c(407L,user.Random.seed()$seed))
currentSeed
mc.cores=3
RNGStream
initialSeeds
initialSeeds
q()
n
require(microsimulation)
debug(callFhcrc)
callFhcrc(10,mc.cores=3)
callFhcrc(10,mc.cores=3)
initialSeeds
chunks
Q
callFhcrc(30,mc.cores=3)
chunks
chunks
initialSeeds
set.user.Random.seed(initialSeeds[[1]])
traceback()
.C("r_set_user_random_seed", seed = as.integer(rep(12345,6)), PACKAGE = "microsimulation")
.C("r_get_user_random_seed", seed = as.integer(rep(1,6)), PACKAGE = "microsimulation")
runif(1)
.C("r_get_user_random_seed", seed = as.integer(rep(1,6)), PACKAGE = "microsimulation")
parallel::nextRNGStream
RNGkind("L'Ecuyer-CMRG")
.Random.seed=as.integer(c(407,rep(12345,6)))
.Random.seed
runif(1)
.Random.seed
.Random.seed
runif(1)
Q
RNGkind("L'Ecuyer-CMRG")
.Random.seed=as.integer(c(407,rep(12345,6)))
.Random.seed
runif(1)
.Random.seed
?nextRNGStream
?parallel::nextRNGStream
require(parallel)
?nextRNGStream
user.Random.seed()
nextRNGStream(as.integer(c(407,rep(12345,6))))
user.Random.seed()
currentSeed
currentSeed <<- parallel::nextRNGStream(currentSeed)
currentSeed
set.user.Random.seed(currentSeed[-1])
set.user.Random.seed(currentSeed)
user.Random.seed
user.Random.seed()
as.integer(c(407,user.Random.seed()$seed))
nextRNGStream(as.integer(c(407,user.Random.seed()$seed)))
q()
n
require(microsimulation)
runif(1)
RNGkind("user")
user.Random.seed()
user.Random.seed()
next.user.Random.stream()
user.Random.seed()
parallel::nextRNGStream(as.integer(c(407,rep(12345,6))))
q()
n
