#+TITLE: Microsimulation package for R

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil

# Babel settings
#+PROPERTY: session *R-org*
# +PROPERTY: cache yes
# +PROPERTY: results output graphics
# +PROPERTY: exports both
# +PROPERTY: tangle yes
# +PROPERTY: exports both

[[http://www.gnu.org/licenses/gpl-3.0.html][http://img.shields.io/:license-gpl3-blue.svg]]
* Background
[[https://en.wikipedia.org/wiki/Microsimulation][Microsimulation]] is a form of individual-based stochastic
simulation. In continuous time, microsimulation is closely related to
[[https://en.wikipedia.org/wiki/Discrete_event_simulation][discrete event simulation]], and in discrete time it is closely related
to [[https://en.wikipedia.org/wiki/Agent-based_model][agent-based models]]. In econometrics and health care,
microsimulation is often used to model policy changes. Our
implementation is in continuous time and uses event-based discrete
event simulation for the model specification.

The package provides several approaches for microsimulation and
event-based, discrete event simulation. The package includes an R
implementation of discrete event simulation, building on several R5
classes. This implementation is useful from a pedagogical perspective,
but it is slow for larger microsimulations. For speed, we also provide
C++ classes for discrete event simulation, building on several well
established libraries, including the [[http://www.inf.usi.ch/carzaniga/ssim/index.html][SSIM]] C++ discrete event
simulation library, the [[http://www.iro.umontreal.ca/~lecuyer/myftp/streams00/][RngStream]] C library for common random numbers,
the [[http://www.boost.org/][Boost]] libraries for making many C++11 tools available to C++98,
and [[http://www.rcpp.org/][Rcpp]] for providing glue between R, R's C API and C++.

We specifically developed this package for modelling the
cost-effectiveness of cancer screening, where there are many
(e.g. 10^7) individuals who are followed from birth to death. Notably,
we provide a complete prostate cancer screening model, including tools
for cost-effectiveness analysis.
* Installing the microsimulation
+ 1 Dependencies: ::
The microsimulation requires [[http://www.rcpp.org/][Rcpp]] and [[http://www.boost.org/][Boost]]. A convenient, but not
required, way of installing github-packages in R is to use
[[https://cran.r-project.org/web/packages/devtools/README.html][devtools]]. Since both of the dependencies and [[https://cran.r-project.org/web/packages/devtools/README.html][devtools]] are available on
[[https://cran.r-project.org/][CRAN]] just run the following in R.
#+BEGIN_SRC R :eval no :exports code
  install.packages("BH")
  install.packages("Rcpp")
  install.packages("devtools")
#+END_SRC

+ 2a Installation with devtools: ::
To install the microsimulation using [[https://cran.r-project.org/web/packages/devtools/README.html][devtools]] just run the following in R:
#+BEGIN_SRC R :eval no :exports code
  require(devtools)
  install_github("mclements/microsimulation")
#+END_SRC
+ 2b Alternative installation from shell: ::
# Some thing OS-specific?
If you prefer the shell over [[https://cran.r-project.org/web/packages/devtools/README.html][devtools]], just run the following to download the
microsimulation R-package:
#+BEGIN_SRC shell :eval no :exports code
  git clone https://github.com/mclements/microsimulation.git
#+END_SRC

To install the microsimulation R-package run this in your shell:
#+BEGIN_SRC shell :eval no :exports code
  R CMD INSTALL path_to_microsimulation
#+END_SRC

* Running the simulation

#+HEADERS: :var reRunSimulation = 0
#+BEGIN_SRC R :exports none
  require(microsimulation)
  myFile <- file.path("inst","sim1.RData")

  if (reRunSimulation || !file.exists(myFile)){
      sim1 <- callFhcrc(1e6,mc.cores=3,screen="screenUptake")
      save(sim1, file=myFile)
  } else {
    load(file=myFile)
  }
#+END_SRC
** Available screening scenarios
There are a number of available testing scenarios. They determine
testing frequencies and re-testing intervals over calendar period and
ages.
+ =noScreening= - no screening test, only diagnosis from symptoms
+ =twoYearlyScreen50to70= - two-yearly screening from age 50 to 70
+ =fourYearlyScreen50to70= - four-yearly screening from age 50 to 70
+ =screen50= - one screen at age 50
+ =screen60= - one screen at age 60
+ =screen70= - one screen at age 70
+ =screenUptake= - current testing pattern in Sweden
+ =goteborg= - risk stratified re-screening 2+4 from age 50 to 70
+ =risk_stratified= - risk stratified re-screening 4+8 from age 50 to 70
+ =mixed_screening= - risk stratified re-screening 2+4 from age 50 to
  70 & opportunistic testing for other ages
# + =randomScreen50to70=
# + =stockholm3_goteborg=
# + =stockholm3_risk_stratified=
# + =regular_screen=
# + =single_screen=

# | Screening scenario name | Pattern of screening                             | Age at testing |
# |-------------------------+--------------------------------------------------+----------------|
# | No screening            | Only clinical diagnosis                          |                |
# | 2-yearly                | 2-yearly testing                                 |          50-70 |
# | 4-yearly                | 4-yearly testing                                 |          50-70 |
# | 50 only                 | Single test at age 50 years                      |             50 |
# | 60 only                 | Single test at age 60 years                      |             60 |
# | 70 only                 | Single test at age 70 years                      |             70 |
# | Opportunistic 1930      | Opportunistic testing for the 1930 birth cohort  |       All ages |
# | Current                 | Opportunistic testing for the 1960 birth cohort  |       All ages |
# | Risk stratified (2+4)   | Risk stratified re-screening 2+4                 |          50-70 |
# | Risk stratified (4+8)   | Risk stratified re-screening 4+8                 |          50-70 |
# | Mixed screening         | Risk stratified re-screening 2+4 & opportunistic |  50-70 & other |

#+BEGIN_SRC R :eval no :exports both
  require(microsimulation)
  sim1 <- callFhcrc(1e6, mc.cores=3, screen="screenUptake")
#+END_SRC

#+RESULTS:
:      user  system elapsed
:   140.653   0.152  83.658
* Results
# ** Simulation output
# The simulation
** Event rates
Some of the more commonly used event-rates are provided through a =plot=
and a =predict= function. The available rates are:
+ =incidence= - rate of /clinical diagnosis/ & /screen initiated diagnosis/
+ =psa= - rate of /screening tests/
+ =biopsies= - rate of /clinical diagnostic biopsies/ & /screen initiated biopsies/
+ =metastatic= - rate of natural history transitions to /metastatic/ cancer
+ =cancerdeath= - rate of /cancer deaths/
+ =alldeath= - rate of /cancer deaths/ & /other deaths/
To construct a rate not listed above you can use the events in
~sim1$summary$events~ and the person-time in ~sim1$summary$pt~.

To simply plot e.g. the /incidence rate/ of the simulated screening scenario
the following line can be used:
#+BEGIN_SRC R :file inst/inc.png :results output graphics :exports both
  plot(sim1, type = "incidence", xlab="Age (years)", xlim=c(40, 90))
#+END_SRC

#+RESULTS:
[[file:inst/inc.png]]

# #+BEGIN_SRC R :file inst/mort.png :results output graphics :exports both
#   plot(sim1, type="cancerdeath", ylab="Cancer specific mortality rate",
#        xlab="Age (years)")
# #+END_SRC

# #+RESULTS:
# [[file:inst/mort.png]]
** Event rates by group
The =predict= function returns the various rates described above. It
can also be used to predict rates by a number of subgroups. The
available subgroups are two time-scales and four natural history
categories:
+ =age= - grouping by single /year of age/ this is the default time-scale
+ =year= - grouping by single /calendar year/ as an alternative time-scale
+ =state= - grouping by /healthy/, /localised/ & /metastatic/
+ =grade= - grouping by /gleason grade/ ~<=6~, ~7~ & ~>=8~
+ =dx= - grouping by /not diagnosed/, /screen diagnosis/ & /clinical diagnosis/
+ =psa= - grouping by psa ~<3~ & ~>=3~

Below is the PSA testing rate by calendar period predicted and
displayed with =ggplot=.
#+BEGIN_SRC R :file inst/psa.png :results output graphics :exports both
  require(ggplot2)
  ggplot(predict(sim1, group = "year", type="psa"),aes(x=year, y=rate)) +
      xlim(1990, 2020) + geom_line() +
      ylab("PSA testing rate") + xlab("Calendar period (years)")
#+END_SRC

#+RESULTS:
[[file:inst/psa.png]]


The rates can also be predicted by several subgroups at once. Plotted
below are the rates of biopsies by age, gleason and health state. The
groups with lower numbers are a little jumpy due to the stochasticity
of the simulation. A larger simulation reduces the Monte-Carlo
variation.
#+BEGIN_SRC R :file inst/biop.png :results output graphics :exports both
  ggplot(predict(sim1, group = c("age", "grade", "state"), type="biopsies"),
         aes(x=age, y=rate, colour = grade)) + geom_line() + xlim(50, 80) +
      ylab("Biopsy rate") + xlab("Age (years)") + facet_grid(. ~ state)
#+END_SRC

#+RESULTS:
[[file:inst/biop.png]]


# This seems to be fixed!
# #+BEGIN_SRC R :file inst/gginc.png :results output graphics :exports both
#   ggplot(predict(sim1, group = c("age", "grade", "psa"), type="incidence"),
#          aes(x=age, y=rate, colour = grade)) + xlim(50, 80) +
#          geom_line() + ylab("Incidence rate") + xlab("Age (years)") + facet_grid(. ~ psa)
# #+END_SRC

# #+RESULTS:

In order to compare multiple screening scenarios the =predict=
function has a second argument for simulation objects. It can be used
to pass a second simulation objects if you which to compare two
screening scenarios or a list of simulation objects for comparing
several screening scenarios. The =type= and =group= argument works as
described earlier. Below is the incidence with the /current uptake/
pattern compared with the hypothetical /no screening/ scenario.
#+BEGIN_SRC R :file inst/scen.png :results output graphics :exports both
  sim2 <- callFhcrc(1e5, mc.cores=3, screen="noScreening")
  ggplot(predict(sim1, sim2, group= "age", type = "incidence"),
            aes(x=age, y=rate, colour = scenario)) + geom_line() + xlim(50, 85) +
      ylab("Incidence rate") + xlab("Age (years)")
#+END_SRC

#+RESULTS:
[[file:inst/scen.png]]


# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
